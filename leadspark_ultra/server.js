const express = require('express'); const fs = require('fs'); const path = require('path'); const helmet = require('helmet'); const bodyParser = require('body-parser'); const nodemailer = require('nodemailer'); const basicAuth = require('basic-auth'); require('dotenv').config(); const app = express(); app.use(helmet()); app.use(express.static(path.join(__dirname))); app.use(bodyParser.json({limit:'200kb'})); const SUB_FILE = path.join(__dirname,'submissions.csv'); if(!fs.existsSync(SUB_FILE)){ fs.writeFileSync(SUB_FILE,'timestamp,name,email,phone,company,message,utm\n'); const demo=[]; for(let i=1;i<=120;i++){ demo.push([new Date(Date.now()-i*3600*1000).toISOString(),`Demo User ${i}`,`demo${i}@example.com`,`+1-555-00${i}`,`DemoCo`,`Interested in plan ${i%4+1}`,'utm=ultra'].join(',')+'\n'); } fs.appendFileSync(SUB_FILE,demo.join('')); } function saveToCSV(obj){ const line=[ new Date().toISOString(), (obj.name||'').replace(/,/g,' '), (obj.email||'').replace(/,/g,' '), (obj.phone||'').replace(/,/g,' '), (obj.company||'').replace(/,/g,' '), (obj.message||'').replace(/,/g,' '), (obj.utm||'').replace(/,/g,' ') ].join(',')+'\n'; fs.appendFileSync(SUB_FILE,line); } function validate(data){ if(!data) return 'Missing data'; if(!data.name||data.name.trim().length<2) return 'Invalid name'; if(!data.email||!/\S+@\S+\.\S+/.test(data.email)) return 'Invalid email'; return null; } app.post('/api/submit', async (req,res)=>{ try{ const err = validate(req.body); if(err) return res.status(400).json({error:err}); saveToCSV(req.body); if(process.env.GSHEET_WEBHOOK){ try{ const fetch = require('node-fetch'); await fetch(process.env.GSHEET_WEBHOOK,{method:'POST',body:JSON.stringify(req.body),headers:{'Content-Type':'application/json'}}); }catch(e){ console.error('gsh',e.message); } } if(process.env.SMTP_HOST && process.env.SMTP_USER && process.env.SMTP_PASS && process.env.NOTIFY_EMAIL){ try{ const transporter = nodemailer.createTransport({ host: process.env.SMTP_HOST, port: process.env.SMTP_PORT?parseInt(process.env.SMTP_PORT):587, secure: process.env.SMTP_SECURE==='1', auth: { user: process.env.SMTP_USER, pass: process.env.SMTP_PASS } }); const html = `<p>New lead:</p><ul><li><b>Name</b>: ${req.body.name}</li><li><b>Email</b>: ${req.body.email}</li><li><b>Phone</b>: ${req.body.phone||''}</li><li><b>Company</b>: ${req.body.company||''}</li><li><b>Message</b>: ${req.body.message||''}</li></ul>`; await transporter.sendMail({ from: process.env.SMTP_FROM||process.env.SMTP_USER, to: process.env.NOTIFY_EMAIL, subject:'[LeadSpark Ultra] New lead', html}); }catch(e){ console.error('mail',e.message); } } return res.json({ok:true}); }catch(e){ console.error(e); return res.status(500).json({error:'server error'}); } }); app.get('/admin', (req,res)=>{ const adminPass = process.env.ADMIN_PASS || 'changeme'; const user = basicAuth(req); if(!user || user.pass !== adminPass){ res.set('WWW-Authenticate','Basic realm="LeadSpark Ultra Admin"'); return res.status(401).send('Authentication required.'); } const q = (req.query.q||'').toLowerCase(); const since = req.query.since||''; const csv = fs.readFileSync(SUB_FILE,'utf8'); const lines = csv.trim().split('\n'); const headers = lines.shift().split(','); let rows = lines.map(l=>l.split(',')); if(q) rows = rows.filter(r=>r.join(' ').toLowerCase().includes(q)); if(since){ const sd = new Date(since); if(!isNaN(sd)) rows = rows.filter(r=> new Date(r[0]) >= sd); } const rowsHtml = rows.map(r=>'<tr>'+r.map(c=>`<td style="padding:6px;border:1px solid #ddd">${c}</td>`).join('')+'</tr>').join(''); res.send(`<html><head><meta charset="utf8"><title>LeadSpark Ultra Admin</title><style>body{font-family:Arial;padding:20px}table{border-collapse:collapse;width:100%}input{padding:8px;margin:6px}</style></head><body><h2>Leads â€” LeadSpark Ultra</h2><form method="get"><input name="q" placeholder="search" value="${req.query.q||''}"><input type="date" name="since" value="${req.query.since||''}"><button>Filter</button> <a href="/admin?">Reset</a></form><p>Records: ${rows.length}</p><p><a href="/">Open site</a> | <a href="/submissions.csv" download>Download CSV</a></p><table>${'<tr>'+headers.map(h=>'<th style="padding:6px;border:1px solid #ddd">'+h+'</th>').join('')+'</tr>'}${rowsHtml}</table></body></html>`); }); app.post('/api/create-checkout-session', async (req,res)=>{ try{ if(!process.env.STRIPE_SECRET || !process.env.STRIPE_PUBLISHABLE) return res.status(400).json({error:'Stripe not configured'}); const stripe = require('stripe')(process.env.STRIPE_SECRET); const {priceId} = req.body||{}; let session; if(priceId && priceId.startsWith('price_')){ session = await stripe.checkout.sessions.create({ payment_method_types:['card'], line_items:[{price:priceId,quantity:1}], mode:'payment', success_url:(process.env.SUCCESS_URL||'http://localhost:3000')+'?paid=1', cancel_url:(process.env.CANCEL_URL||'http://localhost:3000')+'?paid=0' }); } else { const product = await stripe.products.create({name:'LeadSpark Ultra Demo'}); const price = await stripe.prices.create({unit_amount:19900,currency:'usd',product:product.id}); session = await stripe.checkout.sessions.create({ payment_method_types:['card'], line_items:[{price:price.id,quantity:1}], mode:'payment', success_url:(process.env.SUCCESS_URL||'http://localhost:3000')+'?paid=1', cancel_url:(process.env.CANCEL_URL||'http://localhost:3000')+'?paid=0' }); } res.json({sessionId:session.id,publishableKey:process.env.STRIPE_PUBLISHABLE}); }catch(e){ console.error(e); res.status(500).json({error:'stripe error'}); } }); const PORT = process.env.PORT||3000; app.listen(PORT, ()=>console.log('LeadSpark Ultra running on port',PORT));